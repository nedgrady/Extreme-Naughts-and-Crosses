{"version":3,"sources":["useElementDimensions.tsx","ExtremeNaughtsAndCrosses/Board.tsx","ExtremeNaughtsAndCrosses/ExtremeNaughtsAndCrosses.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["isServer","window","noop","noopObserver","observe","unobserve","resizeObserver","ResizeObserver","entries","entry","target","boundingClient","getBoundingClientRect","set","$$useElementDimensionsSet","Object","assign","useIsomorphicLayoutEffect","useEffect","useLayoutEffect","Rect","bottom","height","left","right","top","width","x","y","this","JSON","stringify","contentRect","domRect","size","inlineSize","blockSize","defaultValue","contentBoxSize","borderBoxSize","useElementDimensions","ref","useRef","useState","dimensions","setRef","useCallback","element","current","Element","Table","styled","table","Square","td","Board","boardState","onPiecePlaced","limitingDimensionInPixels","sizeOfEachSquareInPercent","length","css","fontSize","style","map","row","rowIndex","piece","columnIndex","onClick","FlexyGameContainer","div","areSomeNumberOfConsecutiveItemsPresentInArray","targetNumberOfConsecutiveItems","array","numberOfConsecutiveFound","previousItem","currentItem","ExtremeNaughtsAndCrosses","gridSize","players","numberOfPiecesInARowRequiredToWin","initialBoardState","Array","fill","forEach","createInitialEmptyBoardState","setBoardState","winner","transposedBoardState","_","diagonals","leftDiagonalsStartIndex","rightToLeftDiagonalsStartingIndexRightOfPrincipalDiagonal","rightToLeftDiagonalsStartingIndexLeftOfPrincipalDiagonal","push","currentDiagonal","pieceIndex","calculateWinner","whosTurnIsIt","numberOfMoves","filter","pieceOrEmpty","calculateNumberOfMovesMade","gameContainerRef","Math","min","boardStateCopy","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01b2da7f.chunk.js","sourcesContent":["/* istanbul ignore file */\r\n// as stolen from https://github.com/danielkov/use-element-dimensions/releases/tag/v2.1.3\r\nimport {\r\n    useCallback,\r\n    useEffect,\r\n    useLayoutEffect,\r\n    useRef,\r\n    useState,\r\n} from \"react\"\r\n\r\nconst isServer = typeof window === \"undefined\"\r\n\r\nconst isSupported = !isServer && \"ResizeObserver\" in window\r\n\r\nconst noop = () => { }\r\n\r\nconst noopObserver = { observe: noop, unobserve: noop }\r\n\r\nconst resizeObserver = !isSupported\r\n    ? noopObserver\r\n    : new ResizeObserver((entries) => {\r\n        for (let entry of entries) {\r\n            const { target } = entry\r\n            const boundingClient = target.getBoundingClientRect()\r\n            const set = (target as $Element).$$useElementDimensionsSet\r\n            if (set) {\r\n                set(Object.assign(boundingClient, entry))\r\n            }\r\n        }\r\n    })\r\n\r\nexport type ElementDimensions = ResizeObserverEntry & DOMRect\r\n\r\ntype $Element = Element & {\r\n    $$useElementDimensionsSet?: React.Dispatch<\r\n        React.SetStateAction<ElementDimensions>\r\n    >\r\n}\r\n\r\nconst useIsomorphicLayoutEffect = isServer ? useEffect : useLayoutEffect\r\n\r\n// NOTE(danielkov): this is used to stub DOMRectReadonly on the server\r\nclass Rect {\r\n    readonly bottom: number\r\n    readonly height: number\r\n    readonly left: number\r\n    readonly right: number\r\n    readonly top: number\r\n    readonly width: number\r\n    readonly x: number\r\n    readonly y: number\r\n\r\n    constructor() {\r\n        this.bottom = 0\r\n        this.height = 0\r\n        this.left = 0\r\n        this.right = 0\r\n        this.top = 0\r\n        this.width = 0\r\n        this.x = 0\r\n        this.y = 0\r\n    }\r\n    toJSON() {\r\n        return JSON.stringify(this)\r\n    }\r\n}\r\n\r\nconst contentRect = new Rect()\r\nconst domRect = new Rect()\r\nconst size = { inlineSize: 0, blockSize: 0 }\r\nconst defaultValue: any = Object.assign(domRect, {\r\n    contentBoxSize: size,\r\n    borderBoxSize: size,\r\n    contentRect,\r\n    target: (null as unknown) as Element,\r\n})\r\n\r\nconst useElementDimensions = (): [\r\n    ElementDimensions,\r\n    (element?: Element | null) => void\r\n] => {\r\n    const ref = useRef<$Element>(null)\r\n\r\n    const [dimensions, set] = useState<ElementDimensions>(defaultValue)\r\n\r\n    const setRef = useCallback((element?: Element | null) => {\r\n        if (ref.current) {\r\n            resizeObserver.unobserve(ref.current)\r\n        }\r\n        if (element instanceof Element) {\r\n            (element as $Element).$$useElementDimensionsSet = set\r\n            resizeObserver.observe(element)\r\n        }\r\n    }, [])\r\n\r\n    useIsomorphicLayoutEffect(\r\n        () => () => {\r\n            if (ref.current) {\r\n                resizeObserver.unobserve(ref.current)\r\n            }\r\n        },\r\n        []\r\n    )\r\n\r\n    return [dimensions, setRef]\r\n}\r\n\r\nexport default useElementDimensions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Table = styled.table`\r\n    border-collapse: collapse;\r\n`\r\nconst Square = styled.td`\r\n    vertical-align: middle;\r\n    text-align: center;\r\n\r\n    border-color: black;\r\n    padding: 0;\r\n    margin: 0;\r\n\r\n    border-width: 1px 1px 1px 1px;\r\n    border-style: solid;\r\n`\r\ninterface BoardProps {\r\n    boardState: (string | null)[][],\r\n    onPiecePlaced: (x: number, y: number) => void,\r\n    limitingDimensionInPixels: number\r\n}\r\n\r\nexport default function Board({ boardState, onPiecePlaced, limitingDimensionInPixels }: BoardProps) {\r\n\r\n    const sizeOfEachSquareInPercent = `${100 / boardState.length}%`\r\n    const sizeOfEachSquareInPixels = `${(limitingDimensionInPixels / boardState.length / 2) - 1}px`\r\n    const css: React.CSSProperties = {\r\n        width: sizeOfEachSquareInPercent,\r\n        height: sizeOfEachSquareInPercent,\r\n        fontSize: sizeOfEachSquareInPixels\r\n    }\r\n\r\n    return (\r\n        <Table style={{ width: `${limitingDimensionInPixels}px`, height: `${limitingDimensionInPixels}px` }}>\r\n            <tbody>\r\n                {\r\n                    boardState.map((row, rowIndex) =>\r\n                        <tr key={rowIndex}>\r\n                            {\r\n                                row.map((piece, columnIndex) =>\r\n                                    <Square key={`${columnIndex}-${rowIndex}`}\r\n                                            data-testid={`square-${columnIndex}-${rowIndex}`}\r\n                                            onClick={(() => onPiecePlaced(rowIndex, columnIndex))}\r\n                                            style={css}>{piece || \"\"}\r\n                                    </Square>\r\n                                )\r\n                            }\r\n                        </tr>\r\n                    )\r\n                }\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n","import React, { useState } from \"react\"\r\nimport useElementDimensions from \"useElementDimensions\"\r\nimport Board from \"./Board\"\r\nimport styled from 'styled-components'\r\n\r\ntype BoardState = (string | null)[][];\r\n\r\nconst FlexyGameContainer = styled.div`\r\n    @media all and (orientation:portrait) {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    @media all and (orientation:landscape) {\r\n        display: flex;\r\n        flex-direction: row;\r\n    }\r\n\r\n    height: 100%;\r\n    max-height: 100%;\r\n`\r\n\r\nfunction ExtremeNaughtsAndCrosses(\r\n    {\r\n        gridSize,\r\n        players,\r\n        numberOfPiecesInARowRequiredToWin\r\n    }: {\r\n        gridSize: number,\r\n        players: string[],\r\n        numberOfPiecesInARowRequiredToWin: number\r\n    }) {\r\n\r\n    const [boardState, setBoardState] = useState(createInitialEmptyBoardState(gridSize))\r\n\r\n    const winner = calculateWinner(boardState, numberOfPiecesInARowRequiredToWin)\r\n    const numberOfMovesMade = calculateNumberOfMovesMade(boardState)\r\n    const whosTurnIsIt = players[numberOfMovesMade % players.length]\r\n\r\n    const [{ width, height }, gameContainerRef] = useElementDimensions()\r\n\r\n    const limitingDimensionInPixels = Math.min(width, height)\r\n\r\n    return (\r\n        <FlexyGameContainer ref={gameContainerRef}>\r\n            <div>\r\n                <h1>Extreme Naughts and Crosses</h1>\r\n                <p>{whosTurnIsIt} To Move</p>\r\n                <p>{numberOfPiecesInARowRequiredToWin} in a row to win</p>\r\n                {winner && <p>{winner} Wins</p>}\r\n            </div>\r\n            <Board\r\n                boardState={boardState}\r\n                onPiecePlaced={handlePiecePlaced}\r\n                limitingDimensionInPixels={limitingDimensionInPixels} />\r\n        </FlexyGameContainer>)\r\n\r\n    function handlePiecePlaced(x: number, y: number) {\r\n\r\n        if (boardState[x][y])\r\n            return\r\n\r\n        const boardStateCopy: BoardState = []\r\n\r\n        boardState.forEach(row => {\r\n            boardStateCopy.push([...row])\r\n        })\r\n\r\n        boardStateCopy[x][y] = whosTurnIsIt\r\n\r\n        setBoardState(boardStateCopy)\r\n    }\r\n}\r\n\r\n\r\nfunction calculateWinner(\r\n    boardState: BoardState,\r\n    numberOfPiecesInARowRequiredToWin: number) {\r\n\r\n    let winner\r\n\r\n    for (let row of boardState) {\r\n        winner = areSomeNumberOfConsecutiveItemsPresentInArray(numberOfPiecesInARowRequiredToWin, row)\r\n        if (winner)\r\n            return winner\r\n    }\r\n\r\n    let transposedBoardState = boardState[0].map((_, columnIndex) => boardState.map(row => row[columnIndex]))\r\n    for (let column of transposedBoardState) {\r\n        winner = areSomeNumberOfConsecutiveItemsPresentInArray(numberOfPiecesInARowRequiredToWin, column)\r\n        if (winner)\r\n            return winner\r\n    }\r\n\r\n    const diagonals: BoardState = []\r\n    const leftDiagonalsStartIndex = boardState.length - 1\r\n    const rightToLeftDiagonalsStartingIndexRightOfPrincipalDiagonal = leftDiagonalsStartIndex * 2\r\n    const rightToLeftDiagonalsStartingIndexLeftOfPrincipalDiagonal = leftDiagonalsStartIndex * 3\r\n\r\n    boardState.forEach(_ => {\r\n        diagonals.push([], [], [], [])\r\n    })\r\n\r\n    for (let currentDiagonal = 0; currentDiagonal < diagonals.length; currentDiagonal++) {\r\n        for (let pieceIndex = 0; pieceIndex < boardState.length - currentDiagonal; pieceIndex++) {\r\n            diagonals[currentDiagonal].push(boardState[pieceIndex][pieceIndex + currentDiagonal])\r\n            diagonals[currentDiagonal + leftDiagonalsStartIndex].push(boardState[pieceIndex][pieceIndex - currentDiagonal])\r\n            diagonals[currentDiagonal + rightToLeftDiagonalsStartingIndexRightOfPrincipalDiagonal].push(boardState[boardState.length - 1 - pieceIndex][pieceIndex - currentDiagonal])\r\n            diagonals[currentDiagonal + rightToLeftDiagonalsStartingIndexLeftOfPrincipalDiagonal].push(boardState[boardState.length - 1 - pieceIndex][pieceIndex + currentDiagonal])\r\n        }\r\n    }\r\n\r\n    for (let diagonal of diagonals) {\r\n        winner = areSomeNumberOfConsecutiveItemsPresentInArray(numberOfPiecesInARowRequiredToWin, diagonal)\r\n        if (winner)\r\n            return winner\r\n    }\r\n}\r\n\r\nfunction areSomeNumberOfConsecutiveItemsPresentInArray(\r\n    targetNumberOfConsecutiveItems: number,\r\n    array: unknown[]) {\r\n    let numberOfConsecutiveFound = 1\r\n\r\n    let previousItem: unknown = {}\r\n\r\n    for (const currentItem of array) {\r\n        if (currentItem && currentItem === previousItem)\r\n            numberOfConsecutiveFound++\r\n\r\n        if (numberOfConsecutiveFound === targetNumberOfConsecutiveItems)\r\n            return currentItem\r\n\r\n        previousItem = currentItem\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nfunction calculateNumberOfMovesMade(boardState: BoardState) {\r\n    let numberOfMoves = 0\r\n\r\n    boardState.forEach(row => {\r\n        numberOfMoves += row.filter(pieceOrEmpty => !!pieceOrEmpty).length\r\n    })\r\n\r\n    return numberOfMoves\r\n}\r\n\r\nfunction createInitialEmptyBoardState(gridSize: number) {\r\n    const initialBoardState: BoardState = new Array(gridSize)\r\n    initialBoardState.fill(new Array(gridSize))\r\n    initialBoardState.forEach(row => row.fill(null))\r\n    return initialBoardState\r\n}\r\n\r\nexport default ExtremeNaughtsAndCrosses","import React from 'react'\nimport ExtremeNaughtsAndCrosses from 'ExtremeNaughtsAndCrosses/ExtremeNaughtsAndCrosses'\n\nimport './App.css'\n\nfunction App() {\n  return (\n    <>\n      <ExtremeNaughtsAndCrosses gridSize={12} players={[\"❌\", \"♻️\", \"🔷\"]} numberOfPiecesInARowRequiredToWin={3} />\n    </>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}